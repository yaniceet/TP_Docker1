name: CI Maven Build and Test # Nom qui apparaîtra dans l'onglet Actions

on:
  push:
    branches: [ "main", "master" ] # Déclenche le pipeline à chaque 'push' sur ces branches
  pull_request:
    branches: [ "main", "master" ] # Déclenche le pipeline pour les Pull Requests

jobs:
  build:
    # Utilisation d'une machine virtuelle Linux pour l'exécution
    runs-on: ubuntu-latest

    steps:
    # Étape 1: Cloner le code du dépôt (une étape essentielle)
    - name: Checkout code
      uses: actions/checkout@v4

   # Étape 2: Configurer l'environnement Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17' 
        distribution: 'temurin'
        # MODIFICATION : Indiquez à GitHub Actions le chemin du répertoire contenant le pom.xml
        # Remplacez 'app' par le nom du sous-dossier de votre projet Maven s'il est différent.
        cache: 'maven'
        # Nouvelle ligne pour spécifier le chemin vers le pom.xml pour le cache :
        settings-path: './app/pom.xml' 

    # Étape 3: Construire le projet et exécuter les tests
    - name: Build with Maven and run tests
      # MODIFICATION : Maintenant, vous devez exécuter la commande DEPUIS ce sous-dossier.
      run: mvn clean verify -f app/pom.xml
      # Alternativement, vous pouvez utiliser la commande suivante si vous n'utilisez pas l'option -f
      # run: |
      #   cd app
      #   mvn clean verify
